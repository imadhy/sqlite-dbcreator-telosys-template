#parse("./include/data-types-sqlite.vm")
-- File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time ) --

--
-- SQLite database
--

#foreach ( $entity in $selectedEntities )
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
## Table attributes on creation
#set ( $tableColumns = "" )
#foreach ( $attrib in $entity.attributes )
#set ($attribType = "${DOLLAR}dataTypes.${attrib.neutralType}")
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)})
#if ( $attrib.isAutoIncremented() )
#set ( $tableColumns = $tableColumns + "${uncapitalizedAttribName} AUTOINCREMENT" )
#else
#set ( $tableColumns = $tableColumns + "${uncapitalizedAttribName} #evaluate($attribType)" )
#end
#if ( $foreach.count < $entity.attributes.size() )
#if ( !$attrib.isAutoIncremented() && $attrib.isNotNull() )
#set ( $tableColumns = $tableColumns + " NOT NULL,
    " )
#else
#set ( $tableColumns = $tableColumns + ",
    " )
#end
#else
#if ( $attrib.isNotNull() )
#set ( $tableColumns = $tableColumns + " NOT NULL" )
#end
#end
#end
## Foreign Keys
## Foreign key behaviour on delete can be modified depend on the needs :
## ON DELETE RESTRICT, ON DELETE NO ACTION, ON DELETE CASCADE, ON DELETE SET NULL (default)
#set ( $foreignKeys = "" )
#foreach( $link in $entity.selectedLinks )
#if ($foreach.count < $entity.selectedLinks.size())
#foreach( $linkAttribute in $link.attributes )
#set ( $foreignKeys = $foreignKeys + "FOREIGN KEY (${linkAttribute.originAttribute.name}) REFERENCES ${link.fieldName}(${linkAttribute.targetAttribute.name}) ON DELETE SET NULL,
	" )
#end
#else
#foreach( $linkAttribute in $link.attributes )
#set ( $foreignKeys = $foreignKeys + "FOREIGN KEY (${linkAttribute.originAttribute.name}) REFERENCES ${link.fieldName}(${linkAttribute.targetAttribute.name}) ON DELETE SET NULL" )
#end
#end
#end
##
--
-- Name: $entity.name;
-- Type: TABLE;
--

CREATE TABLE if not exists $uncapitalizedEntityName (
    $tableColumns,
#if($foreignKeys != "")
	PRIMARY KEY ($entity.keyAttributesNamesAsString(', ')),
	$foreignKeys
#else
	PRIMARY KEY ($entity.keyAttributesNamesAsString(', '))
#end
);

--------------------------------------------------------------------
#end